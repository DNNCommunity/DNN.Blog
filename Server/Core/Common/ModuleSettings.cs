using System;
using System.Collections;
// 
// DNN Connect - http://dnn-connect.org
// Copyright (c) 2015
// by DNN Connect
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated 
// documentation files (the "Software"), to deal in the Software without restriction, including without limitation 
// the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and 
// to permit persons to whom the Software is furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all copies or substantial portions 
// of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED 
// TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL 
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
// CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
// DEALINGS IN THE SOFTWARE.
// 

using System.Xml;
using DotNetNuke.Common.Utilities;
using DotNetNuke.Services.Tokens;

namespace DotNetNuke.Modules.Blog.Core.Common
{
  [Serializable()]
  public class ModuleSettings : IPropertyAccess
  {

    #region  Private Members 
    private Hashtable _allSettings = null;
    private int _moduleId = -1;
    private int _importedModuleId = -1;
    #endregion

    #region  Properties 
    public string Version { get; set; } = "0.0.0";
    public bool AllowWLW { get; set; } = false;
    public bool AllowMultipleCategories { get; set; } = true;
    public int VocabularyId { get; set; } = -1;
    public bool AllowAttachments { get; set; } = true;
    public SummaryType SummaryModel { get; set; } = SummaryType.HtmlIndependent;
    public string StyleDetectionUrl { get; set; } = "";
    public int WLWRecentPostsMax { get; set; } = 10;
    public bool AutoGenerateMissingSummary { get; set; } = true;
    public int AutoGeneratedSummaryLength { get; set; } = 1000;
    public string FacebookAppId { get; set; } = "";
    public int FacebookProfileIdProperty { get; set; } = -1;

    public bool ModifyPageDetails { get; set; } = false;

    public string RssEmail { get; set; } = "";
    public int RssDefaultNrItems { get; set; } = 20;
    public int RssMaxNrItems { get; set; } = 50;
    public int RssTtl { get; set; } = 30;
    public int RssImageWidth { get; set; } = 144;
    public int RssImageHeight { get; set; } = 96;
    public bool RssImageSizeAllowOverride { get; set; } = true;
    public bool RssAllowContentInFeed { get; set; } = true;
    public string RssDefaultCopyright { get; set; } = "";

    public string PortalTemplatesPath { get; set; } = "";
    public int IncrementViewCount { get; set; } = 60; // seconds
    private string PortalModulePath { get; set; } = "";
    private string PortalModuleMapPath { get; set; } = "";
    private string _portalTemplatesMapPath = "";
    public bool UseFriendlyURLs { get; set; } = true;

    public string PortalTemplatesMapPath
    {
      get
      {
        return _portalTemplatesMapPath;
      }
    }
    public int ModuleId
    {
      get
      {
        return _moduleId;
      }
    }
    #endregion

    #region  Constructors 
    public ModuleSettings(int moduleId)
    {

      _moduleId = moduleId;
      Version = GetType().Assembly.GetName().Version.ToString();
      _allSettings = new DotNetNuke.Entities.Modules.ModuleController().GetModule(moduleId).ModuleSettings;

            this.AllowWLW = _allSettings.ReadValue("AllowWLW", AllowWLW);
            this.AllowMultipleCategories = _allSettings.ReadValue("AllowMultipleCategories", AllowMultipleCategories);
            this.VocabularyId = _allSettings.ReadValue("VocabularyId", VocabularyId);
            this.AllowAttachments = _allSettings.ReadValue("AllowAttachments", AllowAttachments);
            this.SummaryModel = _allSettings.ReadValue("SummaryModel", SummaryModel);
            this.StyleDetectionUrl = _allSettings.ReadValue("StyleDetectionUrl", StyleDetectionUrl);
            this.WLWRecentPostsMax = _allSettings.ReadValue("WLWRecentPostsMax", WLWRecentPostsMax);
            this.ModifyPageDetails = _allSettings.ReadValue("ModifyPageDetails", ModifyPageDetails);
            this.AutoGenerateMissingSummary = _allSettings.ReadValue("AutoGenerateMissingSummary", AutoGenerateMissingSummary);
            this.AutoGeneratedSummaryLength = _allSettings.ReadValue("AutoGeneratedSummaryLength", AutoGeneratedSummaryLength);
            this.FacebookAppId = _allSettings.ReadValue("FacebookAppId", FacebookAppId);
            this.FacebookProfileIdProperty = _allSettings.ReadValue("FacebookProfileIdProperty", FacebookProfileIdProperty);
            this.RssEmail = _allSettings.ReadValue("RssEmail", RssEmail);
            this.RssDefaultNrItems = _allSettings.ReadValue("RssDefaultNrItems", RssDefaultNrItems);
            this.RssMaxNrItems = _allSettings.ReadValue("RssMaxNrItems", RssMaxNrItems);
            this.RssTtl = _allSettings.ReadValue("RssTtl", RssTtl);
            this.RssImageWidth = _allSettings.ReadValue("RssImageWidth", RssImageWidth);
            this.RssImageHeight = _allSettings.ReadValue("RssImageHeight", RssImageHeight);
            this.RssImageSizeAllowOverride = _allSettings.ReadValue("RssImageSizeAllowOverride", RssImageSizeAllowOverride);
            this.RssAllowContentInFeed = _allSettings.ReadValue("RssAllowContentInFeed", RssAllowContentInFeed);
            this.RssDefaultCopyright = _allSettings.ReadValue("RssDefaultCopyright", RssDefaultCopyright);
            this.IncrementViewCount = _allSettings.ReadValue("IncrementViewCount", IncrementViewCount);

      PortalModulePath = DotNetNuke.Entities.Portals.PortalSettings.Current.HomeDirectory;
      if (!PortalModulePath.EndsWith("/"))
      {
        PortalModulePath += "/";
      }
      PortalModulePath += string.Format("Blog/", moduleId);

      PortalModuleMapPath = DotNetNuke.Entities.Portals.PortalSettings.Current.HomeDirectoryMapPath;
      if (!PortalModuleMapPath.EndsWith(@"\"))
      {
        PortalModuleMapPath += @"\";
      }
      PortalModuleMapPath += string.Format(@"Blog\", moduleId);

      _portalTemplatesMapPath = string.Format(@"{0}Templates\", PortalModuleMapPath);
      if (!System.IO.Directory.Exists(_portalTemplatesMapPath))
      {
        System.IO.Directory.CreateDirectory(_portalTemplatesMapPath);
      }
      PortalTemplatesPath = string.Format("{0}Templates/", PortalModulePath);

    }

    public static ModuleSettings GetModuleSettings(int moduleId)
    {
      string CacheKey = "Blog_ModuleSettings" + moduleId.ToString();
      ModuleSettings settings = (ModuleSettings)DataCache.GetCache(CacheKey);
      if (settings is null)
      {
        settings = new ModuleSettings(moduleId);
        DataCache.SetCache(CacheKey, settings);
      }
      return settings;
    }
    #endregion

    #region  Public Members 
    public virtual void UpdateSettings()
    {

      var objModules = new DotNetNuke.Entities.Modules.ModuleController();
      objModules.UpdateModuleSetting(_moduleId, "AllowWLW", AllowWLW.ToString());
      objModules.UpdateModuleSetting(_moduleId, "AllowMultipleCategories", AllowMultipleCategories.ToString());
      objModules.UpdateModuleSetting(_moduleId, "VocabularyId", VocabularyId.ToString());
      objModules.UpdateModuleSetting(_moduleId, "AllowAttachments", AllowAttachments.ToString());
      objModules.UpdateModuleSetting(_moduleId, "SummaryModel", ((int)SummaryModel).ToString());
      objModules.UpdateModuleSetting(_moduleId, "StyleDetectionUrl", StyleDetectionUrl);
      objModules.UpdateModuleSetting(_moduleId, "WLWRecentPostsMax", WLWRecentPostsMax.ToString());
      objModules.UpdateModuleSetting(_moduleId, "ModifyPageDetails", ModifyPageDetails.ToString());
      objModules.UpdateModuleSetting(_moduleId, "AutoGenerateMissingSummary", AutoGenerateMissingSummary.ToString());
      objModules.UpdateModuleSetting(_moduleId, "AutoGeneratedSummaryLength", AutoGeneratedSummaryLength.ToString());
      objModules.UpdateModuleSetting(_moduleId, "FacebookAppId", FacebookAppId);
      objModules.UpdateModuleSetting(_moduleId, "FacebookProfileIdProperty", FacebookProfileIdProperty.ToString());

      objModules.UpdateModuleSetting(_moduleId, "RssEmail", RssEmail);
      objModules.UpdateModuleSetting(_moduleId, "RssDefaultNrItems", RssDefaultNrItems.ToString());
      objModules.UpdateModuleSetting(_moduleId, "RssMaxNrItems", RssMaxNrItems.ToString());
      objModules.UpdateModuleSetting(_moduleId, "RssTtl", RssTtl.ToString());
      objModules.UpdateModuleSetting(_moduleId, "RssImageWidth", RssImageWidth.ToString());
      objModules.UpdateModuleSetting(_moduleId, "RssImageHeight", RssImageHeight.ToString());
      objModules.UpdateModuleSetting(_moduleId, "RssImageSizeAllowOverride", RssImageSizeAllowOverride.ToString());
      objModules.UpdateModuleSetting(_moduleId, "RssAllowContentInFeed", RssAllowContentInFeed.ToString());
      objModules.UpdateModuleSetting(_moduleId, "RssDefaultCopyright", RssDefaultCopyright);
      objModules.UpdateModuleSetting(_moduleId, "IncrementViewCount", IncrementViewCount.ToString());
      if (_importedModuleId > -1)
        objModules.UpdateModuleSetting(_moduleId, "ImportedModuleID", _importedModuleId.ToString());

      string CacheKey = "Blog_ModuleSettings" + _moduleId.ToString();
      DataCache.SetCache(CacheKey, this);
    }
    #endregion

    #region  IPropertyAccess Implementation 
    public string GetProperty(string strPropertyName, string strFormat, System.Globalization.CultureInfo formatProvider, DotNetNuke.Entities.Users.UserInfo AccessingUser, Scope AccessLevel, ref bool PropertyNotFound)
    {
      string OutputFormat = string.Empty;
      var portalSettings = Framework.ServiceLocator<DotNetNuke.Entities.Portals.IPortalController, DotNetNuke.Entities.Portals.PortalController>.Instance.GetCurrentPortalSettings();
      if (string.IsNullOrEmpty(strFormat))
      {
        OutputFormat = "D";
      }
      else
      {
        OutputFormat = strFormat;
      }
      switch (strPropertyName.ToLower() ?? "")
      {
        case "email":
          {
            return PropertyAccess.FormatString(RssEmail, strFormat);
          }
        case "allowmultiplecategories":
          {
            return AllowMultipleCategories.ToString(formatProvider);
          }
        case "allowattachments":
          {
            return AllowAttachments.ToString(formatProvider);
          }
        case "summarymodel":
          {
            return ((int)SummaryModel).ToString();
          }

        case "portaltemplatespath":
          {
            return PropertyAccess.FormatString(PortalTemplatesPath, strFormat);
          }
        case "portalmodulepath":
          {
            return PropertyAccess.FormatString(PortalModulePath, strFormat);
          }
        case "apppath":
          {
            return DotNetNuke.Common.Globals.ApplicationPath;
          }
        case "imagehandlerpath":
          {
            return DotNetNuke.Common.Globals.ResolveUrl(Globals.glbImageHandlerPath);
          }
        case "facebookappid":
          {
            return FacebookAppId;
          }

        default:
          {
            PropertyNotFound = true;
            break;
          }
      }

      return Null.NullString;
    }

    public CacheLevel Cacheability
    {
      get
      {
        return CacheLevel.fullyCacheable;
      }
    }
    #endregion

    #region  Serialization 
    public void Serialize(XmlWriter writer)
    {
      writer.WriteStartElement("Settings");
      writer.WriteElementString("ModuleID", ModuleId.ToString());
      writer.WriteElementString("AllowWLW", AllowWLW.ToString());
      writer.WriteElementString("AllowMultipleCategories", AllowMultipleCategories.ToString());
      writer.WriteElementString("VocabularyId", VocabularyId.ToString());
      writer.WriteElementString("AllowAttachments", AllowAttachments.ToString());
      writer.WriteElementString("SummaryModel", SummaryModel.ToString());
      writer.WriteElementString("StyleDetectionUrl", StyleDetectionUrl);
      writer.WriteElementString("WLWRecentPostsMax", WLWRecentPostsMax.ToString());
      writer.WriteElementString("ModifyPageDetails", ModifyPageDetails.ToString());
      writer.WriteElementString("AutoGenerateMissingSummary", AutoGenerateMissingSummary.ToString());
      writer.WriteElementString("AutoGeneratedSummaryLength", AutoGeneratedSummaryLength.ToString());
      writer.WriteElementString("FacebookAppId", FacebookAppId);
      writer.WriteElementString("FacebookProfileIdProperty", FacebookProfileIdProperty.ToString());

      writer.WriteElementString("RssEmail", RssEmail);
      writer.WriteElementString("RssDefaultNrItems", RssDefaultNrItems.ToString());
      writer.WriteElementString("RssMaxNrItems", RssMaxNrItems.ToString());
      writer.WriteElementString("RssTtl", RssTtl.ToString());
      writer.WriteElementString("RssImageWidth", RssImageWidth.ToString());
      writer.WriteElementString("RssImageHeight", RssImageHeight.ToString());
      writer.WriteElementString("RssImageSizeAllowOverride", RssImageSizeAllowOverride.ToString());
      writer.WriteElementString("RssAllowContentInFeed", RssAllowContentInFeed.ToString());
      writer.WriteElementString("RssDefaultCopyright", RssDefaultCopyright);
      writer.WriteElementString("IncrementViewCount", IncrementViewCount.ToString());
      writer.WriteEndElement(); // settings
    }

    public void FromXml(XmlNode xml)
    {
      if (xml is null)
        return;
            _importedModuleId = xml.ReadValue("ModuleID", ModuleId);
            AllowWLW = xml.ReadValue("AllowWLW", AllowWLW);
            AllowMultipleCategories = xml.ReadValue("AllowMultipleCategories", AllowMultipleCategories);
            VocabularyId = xml.ReadValue("VocabularyId", VocabularyId);
            AllowAttachments = xml.ReadValue("AllowAttachments", AllowAttachments);
            SummaryModel = xml.ReadValue("SummaryModel", SummaryModel);
            StyleDetectionUrl = xml.ReadValue("StyleDetectionUrl", StyleDetectionUrl);
            WLWRecentPostsMax = xml.ReadValue("WLWRecentPostsMax", WLWRecentPostsMax);
            ModifyPageDetails = xml.ReadValue("ModifyPageDetails", ModifyPageDetails);
            AutoGenerateMissingSummary = xml.ReadValue("AutoGenerateMissingSummary", AutoGenerateMissingSummary);
            AutoGeneratedSummaryLength = xml.ReadValue("AutoGeneratedSummaryLength", AutoGeneratedSummaryLength);
            FacebookAppId = xml.ReadValue("FacebookAppId", FacebookAppId);
            FacebookProfileIdProperty = xml.ReadValue("FacebookProfileIdProperty", FacebookProfileIdProperty);
            RssEmail = xml.ReadValue("RssEmail", RssEmail);
            RssDefaultNrItems = xml.ReadValue("RssDefaultNrItems", RssDefaultNrItems);
            RssMaxNrItems = xml.ReadValue("RssMaxNrItems", RssMaxNrItems);
            RssTtl = xml.ReadValue("RssTtl", RssTtl);
            RssImageWidth = xml.ReadValue("RssImageWidth", RssImageWidth);
            RssImageHeight = xml.ReadValue("RssImageHeight", RssImageHeight);
            RssImageSizeAllowOverride = xml.ReadValue("RssImageSizeAllowOverride", RssImageSizeAllowOverride);
            RssAllowContentInFeed = xml.ReadValue("RssAllowContentInFeed", RssAllowContentInFeed);
            RssDefaultCopyright = xml.ReadValue("RssDefaultCopyright", RssDefaultCopyright);
            IncrementViewCount = xml.ReadValue("IncrementViewCount", IncrementViewCount);
    }
    #endregion

  }
}